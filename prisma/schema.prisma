generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(HUMAN)
  isLocked      Boolean        @default(false)
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
  subscriptions Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Purchase {
  id          String   @id @default(cuid())
  name        String
  description String?
  cost        Float
  date        DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  label       Label
}

model Subscription {
  id          String   @id @default(cuid())
  name        String
  description String?
  cost        Float
  startDate   DateTime
  isActive    Boolean  @default(true)
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  label       Label
}

enum Label {
  AUTOMOTIVE
  BILLS_AND_UTILITES
  EDUCATION
  ENTERTAINMENT
  FEES_AND_ADJUSTMENTS
  FOOD_AND_DRINK
  GAS
  GIFTS_AND_DONATIONS
  GROCERIES
  HEALTH_AND_WELLNESS
  HOME
  MISCELLANEOUS
  PERSONAL
  PROFESSIONAL_SERVICES
  SHOPPING
  TRAVEL
}

enum Role {
  HUMAN
  GOD
}
